name: MLOps CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  REPO: dansarpong/mlops-capstone
  AWS_REGION: us-east-1
  S3_BUCKET: mlops-dev-dansarpong-s3
  SHARED_VENV_PATH: venv

jobs:
  deploy-staging:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Run deployment on EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Clone the repository
          rm -rf mlops-capstone || true
          git clone https://github.com/${{ env.REPO }} mlops-capstone
          cd mlops-capstone

          # Download env file from S3
          aws s3 cp s3://${{ env.S3_BUCKET }}/.env .env

          # Set up shared python environment
          if [ ! -d "${{ env.SHARED_VENV_PATH }}" ]; then
            python3.11 -m venv ${{ env.SHARED_VENV_PATH }}
          fi
          source ${{ env.SHARED_VENV_PATH }}/bin/activate
          pip install -r requirements.txt --cache-dir .cache

          # Stop existing Docker containers
          docker-compose -f docker-compose.yml down || true

          # Start Docker containers
          docker-compose -f docker-compose.yml up -d --build

  cleanup:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Cleanup old Docker images
      run: |
        docker image prune -f